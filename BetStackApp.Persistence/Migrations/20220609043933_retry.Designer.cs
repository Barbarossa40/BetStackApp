// <auto-generated />
using System;
using BetStackApp.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BetStackApp.Persistence.Migrations
{
    [DbContext(typeof(BetStackAppDbContext))]
    [Migration("20220609043933_retry")]
    partial class retry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BetStackApp.Domain.Entities.Bet", b =>
                {
                    b.Property<Guid>("BetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BetAgainstCompetitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BetOnCompetitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePlaced")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParlayLeg")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MatchBetOnMatchId")
                        .HasColumnType("int");

                    b.Property<double>("NetReturn")
                        .HasColumnType("float");

                    b.Property<double>("Odds")
                        .HasColumnType("float");

                    b.Property<Guid?>("ParlayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("WagerAmount")
                        .HasColumnType("float");

                    b.Property<bool>("WinBet")
                        .HasColumnType("bit");

                    b.HasKey("BetId");

                    b.HasIndex("BetAgainstCompetitorId");

                    b.HasIndex("BetOnCompetitorId");

                    b.HasIndex("MatchBetOnMatchId");

                    b.HasIndex("ParlayId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("BetStackApp.Domain.Entities.Competitor", b =>
                {
                    b.Property<Guid>("CompetitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeBase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompetitorId");

                    b.ToTable("Competitors");

                    b.HasData(
                        new
                        {
                            CompetitorId = new Guid("6313179f-7837-473a-a4d5-a5571b43e6a6"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "According to his mother he is, a very handsome man",
                            HomeBase = "Lake Orion, MI USA",
                            Name = "Geoffrey"
                        });
                });

            modelBuilder.Entity("BetStackApp.Domain.Entities.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("League")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MatchEventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatchId");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            MatchId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            League = "LOBO Fight Club",
                            MatchDate = new DateTime(2022, 6, 9, 0, 39, 32, 858, DateTimeKind.Local).AddTicks(4795),
                            MatchEventName = "The Rumble From Down Under",
                            Sport = "Mixed Martial Arts"
                        });
                });

            modelBuilder.Entity("BetStackApp.Domain.Entities.Parlay", b =>
                {
                    b.Property<Guid>("ParlayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AmountWagered")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCompletion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePlaced")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("NetReturn")
                        .HasColumnType("float");

                    b.Property<double>("ParlayOdds")
                        .HasColumnType("float");

                    b.Property<bool>("WinParlay")
                        .HasColumnType("bit");

                    b.HasKey("ParlayId");

                    b.ToTable("Parlays");
                });

            modelBuilder.Entity("BetStackApp.Domain.Entities.Bet", b =>
                {
                    b.HasOne("BetStackApp.Domain.Entities.Competitor", "BetAgainst")
                        .WithMany()
                        .HasForeignKey("BetAgainstCompetitorId");

                    b.HasOne("BetStackApp.Domain.Entities.Competitor", "BetOn")
                        .WithMany()
                        .HasForeignKey("BetOnCompetitorId");

                    b.HasOne("BetStackApp.Domain.Entities.Match", "MatchBetOn")
                        .WithMany()
                        .HasForeignKey("MatchBetOnMatchId");

                    b.HasOne("BetStackApp.Domain.Entities.Parlay", null)
                        .WithMany("ParlayBets")
                        .HasForeignKey("ParlayId");

                    b.Navigation("BetAgainst");

                    b.Navigation("BetOn");

                    b.Navigation("MatchBetOn");
                });

            modelBuilder.Entity("BetStackApp.Domain.Entities.Parlay", b =>
                {
                    b.Navigation("ParlayBets");
                });
#pragma warning restore 612, 618
        }
    }
}
